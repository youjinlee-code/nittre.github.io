{"componentChunkName":"component---src-templates-post-template-tsx","path":"/golang-file-io/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>파일 시스템 패키지 - <code class=\"language-text\">os</code>, <code class=\"language-text\">io</code>, <code class=\"language-text\">ioutil</code>, <code class=\"language-text\">bufio</code></h2>\n<p>Go언어어는 파일 I/O와 관련된 다양한 패키지들이 있다. 무려 네 가지나 있는 바람에 한번 짚고 넘어가면 좋을 것 같아 정리해둔다.</p>\n<p>주요 패키지는 아래와 같다.</p>\n<br/>\n<ul>\n<li><code class=\"language-text\">os</code> 패키지: 운영체제와 상호작용하는 패키지로, 파일을 열고, 생성하고, 삭제하는 등의 파일 시스템 작업을 수행한다.</li>\n<li><code class=\"language-text\">io</code> 패키지: 파일 입출력 연산을 위한 인터페이스를 제공한다.</li>\n<li><code class=\"language-text\">ioutil</code> 패키지: 파일 작업을 편리하게 처리하기 위한 유틸리티 함수를 제공한다.</li>\n<li><code class=\"language-text\">bufio</code> 패키지: I/O 작업 시 버퍼 방식을 사용할 수 있도록 함수를 제공한다.</li>\n</ul>\n<h3><code class=\"language-text\">os</code> 패키지</h3>\n<blockquote>\n<p>Package os provides a platform-independent interface to operating system functionality.</p>\n<p>os 패키지는 운영체제 기능에 대한 플랫폼 독립적인 인터페이스를 제공한다.</p>\n</blockquote>\n<p>다음과 같이 파일을 열 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.go\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// For read access.</span>\n\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">os.Open()</code>으로 파일을 열면, 바이트 조각 단위로 파일 데이터를 읽을 수 있다. 읽기 및 쓰기 작업 시, 인자로 주어진 슬라이스의 길이만큼 작업한다. (예를 들어, 슬라이스의 길이가 100이면 100byte만 읽는다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">data <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 읽어들인 파일 데이터를 저장하는 공간</span>\ncount<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 읽어들인 파일 데이터의 길이를 반환한다</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read %d bytes: %q\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 외에도 <code class=\"language-text\">Create</code>, <code class=\"language-text\">Remove</code> 등의 함수를 사용해 파일을 다룰 수 있다.</p>\n<h3><code class=\"language-text\">io</code> 패키지</h3>\n<blockquote>\n<p>Package io provides basic interfaces to I/O primitives. Its primary job is to wrap existing implementations of such primitives, such as those in package os, into shared public interfaces that abstract the functionality, plus some other related primitives.</p>\n<p>io 패키지는 I/O Primitives에 대한 기본 인터페이스를 제공한다. io 패키지는 주로 (os 패키지에 있는 것과 같이) primitives들의 구현체를 공용 퍼블릭 인터페이스와 다른 관련된 primitives로 감싸 기능을 추상화하는 것이다.</p>\n</blockquote>\n<br/>\n<ul>\n<li>파일 입출력과 관련된 인터페이스와 함수를 제공하는 패키지</li>\n<li>io 패키지의 함수와 메서드를 사용해 데이터를 읽고 쓰는 작업을 수행할 수 있다.</li>\n<li>파일 입출력에 사용되는 일반적인 인터페이스인 <code class=\"language-text\">io.Reader</code>와 <code class=\"language-text\">io.Writer</code>를 정의한다.\n<ul>\n<li>다른 패키지들은 io 패키지에 정의된 인터페이스를 구현하여 표준화된 입출력 작업을 수행한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<p>예시 - <code class=\"language-text\">io.ReadFull</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res.txt\"</span><span class=\"token punctuation\">)</span>\n\nbyteSlice <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">245</span><span class=\"token punctuation\">)</span>\nnumBytesRead<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFull</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> byteSlice<span class=\"token punctuation\">)</span> <span class=\"token comment\">// file에서 len(byteSlice)만큼만 읽어들여서 byteSlice에 저장</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"io - Number of Bytes Read: %d\\n\"</span><span class=\"token punctuation\">,</span> numBytesRead<span class=\"token punctuation\">)</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data Read: %s\\n\"</span><span class=\"token punctuation\">,</span> byteSlice<span class=\"token punctuation\">)</span></code></pre></div>\n<h3><code class=\"language-text\">ioutil</code> 패키지</h3>\n<blockquote>\n<p>Package ioutil implements some I/O utility functions.</p>\n<p>ioutil 패키지는 I/O 유틸리티 함수를 구현한다.</p>\n</blockquote>\n<blockquote>\n<p>Deprecated: As of Go 1.16, the same functionality is now provided by package io or package os, and those implementations should be preferred in new code.</p>\n<p>Deprecated: Go 1.16부터, 동일한 기능은 io 패키지와 os 패키지에서 제공하며, 새롭게 코드를 작성할 때는 두 패키지를 사용하는 것을 권장한다.</p>\n</blockquote>\n<br/>\n<ul>\n<li>I/O 작업을 편리하게 처리하기 위한 유틸리티 함수를 제공한다.\n<ul>\n<li>예를 들어, ReadFile, WriteFile 함수를 통해 파일 내용을 한번에 읽거나 쓸 수 있다.</li>\n</ul>\n</li>\n<li>그러나 1.16 버전부터 deprecated 되었으며, 기존 ioutil 함수들은 os 패키지와 io 패키지에 구현되었다.</li>\n</ul>\n<br/>\n<p>예시 - ioutil.ReadFile (파일을 열고 한꺼번에 읽는다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">readByIoutil</span><span class=\"token punctuation\">(</span>filename <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdata<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Panicf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed reading data from file: %s\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nSize: %d bytes\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nData: %s\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ioutil 패키지의 ReadFile 함수 구현 모습을 보면, 실제로 <code class=\"language-text\">os.ReadFile()</code>을 내부적으로 호출하는 것을 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>filename <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">bufio</code> 패키지</h3>\n<blockquote>\n<p>Package bufio implements buffered I/O. It wraps an io.Reader or io.Writer object, creating another object (Reader or Writer) that also implements the interface but provides buffering and some help for textual I/O.</p>\n<p>bufio 패키지는 버퍼링된 I/O를 구현한다. io.Reader와 io.Writer 인터페이스를 래핑하여 Reader, Writer 객체를 만들고, 버퍼 및 텍스트 I/O와 관련된 기능을 제공한다.</p>\n</blockquote>\n<br/>\n<ul>\n<li>bufio는 버퍼 방식을 사용해, 청크 단위로 I/O 작업을 하는 과정에서 발생하는 오버헤드를 줄여 성능을 향상시킨다.\n<ul>\n<li>따라서, 파일 크기가 크거나, 데이터 양이 많은 경우 유용하다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">bufio.Reader</code>와 <code class=\"language-text\">bufio.Writer</code> 타입을 사용해 입출력 작업을 처리한다.</li>\n</ul>\n<br/>\n<p>실제로, <code class=\"language-text\">bufio.Reader</code> 구조체는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Reader <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tbuf          <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\trd           io<span class=\"token punctuation\">.</span>Reader <span class=\"token comment\">// reader provided by the client</span>\n\tr<span class=\"token punctuation\">,</span> w         <span class=\"token builtin\">int</span>       <span class=\"token comment\">// buf read and write positions</span>\n\terr          <span class=\"token builtin\">error</span>\n\tlastByte     <span class=\"token builtin\">int</span> <span class=\"token comment\">// last byte read for UnreadByte; -1 means invalid</span>\n\tlastRuneSize <span class=\"token builtin\">int</span> <span class=\"token comment\">// size of last rune read for UnreadRune; -1 means invalid</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>클라이언트로부터 reader를 받을 때, <code class=\"language-text\">io.Reader</code> 인터페이스를 구현한 reader 객체를 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// bufio.NewReader()</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>rd io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Reader <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">NewReaderSize</span><span class=\"token punctuation\">(</span>rd<span class=\"token punctuation\">,</span> defaultBufSize<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>bufio 패키지를 사용해 아래와 같이 read, write 작업을 수행할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ReadWriteByBufio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfi<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"res.txt\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// read buffer 만들기</span>\n\tr <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>fi<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Output 파일 만들기</span>\n\tfo<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> fo<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// write buffer 만들기</span>\n\tw <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewWriter</span><span class=\"token punctuation\">(</span>fo<span class=\"token punctuation\">)</span>\n\n\tbuf <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 무한루프</span>\n\t\t<span class=\"token comment\">// read a chunk</span>\n\n\t\t<span class=\"token comment\">// 1. 입력 파일에서 데이터를 읽어와 buf에 저장한다.</span>\n\t\t<span class=\"token comment\">//    읽은 바이트 수를 n에 할당한다</span>\n\t\tn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// 2. 읽기 과정에서 에러 생긴 경우 &amp;&amp; 오류가 파일의 끝(io.EOF)이 아닌 경우 패닉</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">!=</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 3. 읽은 바이트 수가 0, 즉 더 이상 읽을 게 없는 경우(=파일의 끝인 경우) 무한루프 종료</span>\n\t\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 4. 읽은 데이터(buf)를 출력 파일에 쓴다</span>\n\t\t<span class=\"token comment\">//    중간에 에러 나면 패닉처리</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 5. w.Flush() = io.Writer에 남은 버퍼 데이터를 강제로 파일에 씀</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">Flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>정리</h2>\n<p>os, io, ioutil, bufio 패키지 각각이 유사한 작업들을 수행하기 때문에, 각 패키지가 무슨 역할을 집중적으로 수행하는지 구별할 필요가 있다.</p>\n<br/>\n<ul>\n<li><code class=\"language-text\">os</code>\n<ul>\n<li><strong>파일 시스템</strong> 작업에 집중 (파일 생성, 수정, 삭제)</li>\n<li>운영체제와 밀접한 관련이 있는 작업(e.g. 파일시스템)</li>\n</ul>\n</li>\n<li><code class=\"language-text\">io</code>\n<ul>\n<li>파일 입출력을 위한 <strong>인터페이스</strong>를 제공</li>\n<li>파일 입출력과 관련된 기본적인 함수(구현체)를 제공</li>\n</ul>\n</li>\n<li><code class=\"language-text\">ioutil</code>\n<ul>\n<li>파일 입출력과 관련된 여러 기능을 제공했지만, deprecated</li>\n<li>ioutil 패키지의 기능들은 io, os 패키지에 흡수되었다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">bufio</code>\n<ul>\n<li>버퍼 방식으로 파일 입출력을 할수 있게 해준다.</li>\n<li>성능 굿!!</li>\n</ul>\n</li>\n</ul>\n<h2>무엇을 써야할까?</h2>\n<p>정답은 없다.</p>\n<ul>\n<li>os.Open() 후 io.ReadFull()을 써도 되고,</li>\n<li>os.ReadFile()을 써도 되고,</li>\n<li>os.Open() 후 bufio.NewReader()와 bufio.Read()를 써도 된다.</li>\n</ul>\n<p>다만 나라면 파일 입출력이 필요할 때는 <strong>bufio 패키지</strong>를 적극적으로 사용할 것 같다.</p>\n<p>파일 입출력은 디스크라는 물리적인 공간을 방문하는 행위이기 때문에 성능이 중요하고, 따라서 버퍼 방식으로 처리해 조금이라도 방문 횟수를 줄이는 것이 좋을 것 같다.</p>","frontmatter":{"title":"[Go] 파일 입출력 패키지 4종 정리(os, io, ioutil, bufio)","summary":"os, io, ioutil, bufio 패키지에 대해 가볍게 살펴보고, 각 패키지의 차이점을 확인합니다.","date":"2023-05-26","categories":["Golang"]}}}]}},"pageContext":{"slug":"/golang-file-io/","previous":null,"next":{"id":"36488a6d-50ab-55e5-b8b6-11e7060a44aa","fields":{"slug":"/utxo/"},"frontmatter":{"title":"UTXO의 동작원리"}}}},"staticQueryHashes":[],"slicesMap":{}}