{"componentChunkName":"component---src-templates-post-template-tsx","path":"/ts-strictNullChecks/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"strictnullchecks-옵션\" style=\"position:relative;\"><a href=\"#strictnullchecks-%EC%98%B5%EC%85%98\" aria-label=\"strictnullchecks 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>strictNullChecks 옵션</h2>\n<p><code class=\"language-text\">strictNullChecks</code> 옵션은 타입스크립트에서 null 또는 undefined를 엄격하게 제한하는 옵션이다. (왜 이름에 undefined는 포함이 안되어있을까? 🤔)</p>\n<p><code class=\"language-text\">strictNullChecks</code> 옵션을 true로 설정하게 되면, <strong>변수에 암시적으로 undefined 또는 null이 입력될 가능성이 있는 경우</strong> 컴파일 에러를 낸다.</p>\n<br/>\n<p>공식문서의 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">declare <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">loggedInUsername</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Oby\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Heera\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">32</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> loggedInUser <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">u</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> u<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> loggedInUsername<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>loggedInUser<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">loggedInUser</code> 함수는 <code class=\"language-text\">users</code> 배열을 순회하며 요소의 <code class=\"language-text\">name</code> 속성이 <code class=\"language-text\">loggedInUsername</code> 변수와 같은 경우 해당 요소를 반환한다. 그리고 반환된 값은 <code class=\"language-text\">loggedInUser</code> 변수에 할당되며, 콘솔에 출력한다.</p>\n<p>여기서 중요한 것은 마지막 줄이다. 실제로 해당 코드를 컴파일하면 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>loggedInUser<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// semantic error TS2532: Object is possibly 'undefined'.</span></code></pre></div>\n<p>Object is possibly ‘undefined’, 즉 객체가 잠재적으로 “undefined”가 될 수 있다는 것을 의미한다.</p>\n<br/>\n<p>이렇게, <code class=\"language-text\">strictNullChecks</code> 옵션을 켜두면 <strong>undefined 또는 null 값이 예기치 않게 변수에 할당되는 문제</strong>를 막을 수 있다.</p>\n<h2 id=\"strictnullchecks-옵션의-이점\" style=\"position:relative;\"><a href=\"#strictnullchecks-%EC%98%B5%EC%85%98%EC%9D%98-%EC%9D%B4%EC%A0%90\" aria-label=\"strictnullchecks 옵션의 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>strictNullChecks 옵션의 이점</h2>\n<p>chat gpt는 이렇게 말해주고 있다.</p>\n<blockquote>\n<p><strong>strictNullChecks 옵션을 켜면 다음과 같은 이점이 있습니다:</strong></p>\n<ul>\n<li>\n<p>변수를 선언할 때 null 및 undefined를 명시적으로 허용해야 합니다. 이를 통해 <strong>의도하지 않은 null 또는 undefined 값을 사용하는 버그를 방지할 수 있습니다.</strong></p>\n</li>\n<li>\n<p>옵셔널한 프로퍼티(?를 사용한 프로퍼티)나 선택적 매개변수를 사용할 때, 해당 값이 null 또는 undefined일 수 있다는 것을 명시적으로 표현해야 합니다.</p>\n</li>\n<li>\n<p>타입 가드나 타입 단언을 사용하여 <strong>null 및 undefined 값의 존재 여부를 확인</strong>하고, 안전하게 사용할 수 있습니다.</p>\n</li>\n<li>\n<p>컴파일러가 null 및 undefined 값을 엄격하게 추론하여 <strong>타입 오류를 빠르게 감지</strong>할 수 있습니다.</p>\n</li>\n</ul>\n<p>이와 같이 strictNullChecks 옵션을 켜면 코드의 안정성과 신뢰성을 향상시킬 수 있습니다.</p>\n</blockquote>\n<p>정리하면, strictNullChecks 옵션을 사용하면</p>\n<ul>\n<li>변수를 선언할 때 null, undefined를 명시적으로 허용해야 하기 때문에, 의도치 않게 null, undefined 값이 사용되어 버그가 발생하는 것을 방지할 수 있다.</li>\n<li>타입스크립트의 타입 단언을 통해 null, undefined가 잠재적으로 사용될 수 있음을 확인할 수 있다.</li>\n</ul>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/tsconfig#strictNullChecks\" target=\"_blank\" rel=\"nofollow\">https://www.typescriptlang.org/tsconfig#strictNullChecks</a></li>\n<li><a href=\"https://chat.openai.com/\" target=\"_blank\" rel=\"nofollow\">https://chat.openai.com/</a></li>\n</ul>","frontmatter":{"title":"[타입스크립트] strictNullChecks 옵션 꼭 켜야할까?","summary":null,"date":"2023-06-26","categories":["Typescript"]}}}]}},"pageContext":{"slug":"/ts-strictNullChecks/","previous":null,"next":{"id":"1fe6ac7a-20e3-5886-bad8-a136c6636f06","fields":{"slug":"/golang-file-io/"},"frontmatter":{"title":"[Go] 파일 입출력 패키지 4종 정리(os, io, ioutil, bufio)"}},"tableOfContents":"<ul>\n<li><a href=\"#strictnullchecks-%EC%98%B5%EC%85%98\">strictNullChecks 옵션</a></li>\n<li><a href=\"#strictnullchecks-%EC%98%B5%EC%85%98%EC%9D%98-%EC%9D%B4%EC%A0%90\">strictNullChecks 옵션의 이점</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>"}},"staticQueryHashes":[],"slicesMap":{}}